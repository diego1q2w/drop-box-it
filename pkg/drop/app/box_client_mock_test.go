// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package app

import (
	"context"
	"github.com/diego1q2w/drop-box-it/pkg/drop/domain"
	"sync"
)

var (
	lockboxClientMockDeleteDocument sync.RWMutex
	lockboxClientMockWriteDocument  sync.RWMutex
)

// Ensure, that boxClientMock does implement boxClient.
// If this is not the case, regenerate this file with moq.
var _ boxClient = &boxClientMock{}

// boxClientMock is a mock implementation of boxClient.
//
//     func TestSomethingThatUsesboxClient(t *testing.T) {
//
//         // make and configure a mocked boxClient
//         mockedboxClient := &boxClientMock{
//             DeleteDocumentFunc: func(ctx context.Context, file domain.File, content []byte) error {
// 	               panic("mock out the DeleteDocument method")
//             },
//             WriteDocumentFunc: func(ctx context.Context, file domain.File, content []byte) error {
// 	               panic("mock out the WriteDocument method")
//             },
//         }
//
//         // use mockedboxClient in code that requires boxClient
//         // and then make assertions.
//
//     }
type boxClientMock struct {
	// DeleteDocumentFunc mocks the DeleteDocument method.
	DeleteDocumentFunc func(ctx context.Context, file domain.File, content []byte) error

	// WriteDocumentFunc mocks the WriteDocument method.
	WriteDocumentFunc func(ctx context.Context, file domain.File, content []byte) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteDocument holds details about calls to the DeleteDocument method.
		DeleteDocument []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// File is the file argument value.
			File domain.File
			// Content is the content argument value.
			Content []byte
		}
		// WriteDocument holds details about calls to the WriteDocument method.
		WriteDocument []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// File is the file argument value.
			File domain.File
			// Content is the content argument value.
			Content []byte
		}
	}
}

// DeleteDocument calls DeleteDocumentFunc.
func (mock *boxClientMock) DeleteDocument(ctx context.Context, file domain.File, content []byte) error {
	if mock.DeleteDocumentFunc == nil {
		panic("boxClientMock.DeleteDocumentFunc: method is nil but boxClient.DeleteDocument was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		File    domain.File
		Content []byte
	}{
		Ctx:     ctx,
		File:    file,
		Content: content,
	}
	lockboxClientMockDeleteDocument.Lock()
	mock.calls.DeleteDocument = append(mock.calls.DeleteDocument, callInfo)
	lockboxClientMockDeleteDocument.Unlock()
	return mock.DeleteDocumentFunc(ctx, file, content)
}

// DeleteDocumentCalls gets all the calls that were made to DeleteDocument.
// Check the length with:
//     len(mockedboxClient.DeleteDocumentCalls())
func (mock *boxClientMock) DeleteDocumentCalls() []struct {
	Ctx     context.Context
	File    domain.File
	Content []byte
} {
	var calls []struct {
		Ctx     context.Context
		File    domain.File
		Content []byte
	}
	lockboxClientMockDeleteDocument.RLock()
	calls = mock.calls.DeleteDocument
	lockboxClientMockDeleteDocument.RUnlock()
	return calls
}

// WriteDocument calls WriteDocumentFunc.
func (mock *boxClientMock) WriteDocument(ctx context.Context, file domain.File, content []byte) error {
	if mock.WriteDocumentFunc == nil {
		panic("boxClientMock.WriteDocumentFunc: method is nil but boxClient.WriteDocument was just called")
	}
	callInfo := struct {
		Ctx     context.Context
		File    domain.File
		Content []byte
	}{
		Ctx:     ctx,
		File:    file,
		Content: content,
	}
	lockboxClientMockWriteDocument.Lock()
	mock.calls.WriteDocument = append(mock.calls.WriteDocument, callInfo)
	lockboxClientMockWriteDocument.Unlock()
	return mock.WriteDocumentFunc(ctx, file, content)
}

// WriteDocumentCalls gets all the calls that were made to WriteDocument.
// Check the length with:
//     len(mockedboxClient.WriteDocumentCalls())
func (mock *boxClientMock) WriteDocumentCalls() []struct {
	Ctx     context.Context
	File    domain.File
	Content []byte
} {
	var calls []struct {
		Ctx     context.Context
		File    domain.File
		Content []byte
	}
	lockboxClientMockWriteDocument.RLock()
	calls = mock.calls.WriteDocument
	lockboxClientMockWriteDocument.RUnlock()
	return calls
}
