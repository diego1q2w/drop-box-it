// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package http

import (
	"context"
	"github.com/diego1q2w/drop-box-it/pkg/box/domain"
	"sync"
)

var (
	lockboxerMockDeleteDocuments sync.RWMutex
	lockboxerMockWriteDocuments  sync.RWMutex
)

// Ensure, that boxerMock does implement boxer.
// If this is not the case, regenerate this file with moq.
var _ boxer = &boxerMock{}

// boxerMock is a mock implementation of boxer.
//
//     func TestSomethingThatUsesboxer(t *testing.T) {
//
//         // make and configure a mocked boxer
//         mockedboxer := &boxerMock{
//             DeleteDocumentsFunc: func(ctx context.Context, path domain.Path) error {
// 	               panic("mock out the DeleteDocuments method")
//             },
//             WriteDocumentsFunc: func(ctx context.Context, file domain.File) error {
// 	               panic("mock out the WriteDocuments method")
//             },
//         }
//
//         // use mockedboxer in code that requires boxer
//         // and then make assertions.
//
//     }
type boxerMock struct {
	// DeleteDocumentsFunc mocks the DeleteDocuments method.
	DeleteDocumentsFunc func(ctx context.Context, path domain.Path) error

	// WriteDocumentsFunc mocks the WriteDocuments method.
	WriteDocumentsFunc func(ctx context.Context, file domain.File) error

	// calls tracks calls to the methods.
	calls struct {
		// DeleteDocuments holds details about calls to the DeleteDocuments method.
		DeleteDocuments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Path is the path argument value.
			Path domain.Path
		}
		// WriteDocuments holds details about calls to the WriteDocuments method.
		WriteDocuments []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// File is the file argument value.
			File domain.File
		}
	}
}

// DeleteDocuments calls DeleteDocumentsFunc.
func (mock *boxerMock) DeleteDocuments(ctx context.Context, path domain.Path) error {
	if mock.DeleteDocumentsFunc == nil {
		panic("boxerMock.DeleteDocumentsFunc: method is nil but boxer.DeleteDocuments was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Path domain.Path
	}{
		Ctx:  ctx,
		Path: path,
	}
	lockboxerMockDeleteDocuments.Lock()
	mock.calls.DeleteDocuments = append(mock.calls.DeleteDocuments, callInfo)
	lockboxerMockDeleteDocuments.Unlock()
	return mock.DeleteDocumentsFunc(ctx, path)
}

// DeleteDocumentsCalls gets all the calls that were made to DeleteDocuments.
// Check the length with:
//     len(mockedboxer.DeleteDocumentsCalls())
func (mock *boxerMock) DeleteDocumentsCalls() []struct {
	Ctx  context.Context
	Path domain.Path
} {
	var calls []struct {
		Ctx  context.Context
		Path domain.Path
	}
	lockboxerMockDeleteDocuments.RLock()
	calls = mock.calls.DeleteDocuments
	lockboxerMockDeleteDocuments.RUnlock()
	return calls
}

// WriteDocuments calls WriteDocumentsFunc.
func (mock *boxerMock) WriteDocuments(ctx context.Context, file domain.File) error {
	if mock.WriteDocumentsFunc == nil {
		panic("boxerMock.WriteDocumentsFunc: method is nil but boxer.WriteDocuments was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		File domain.File
	}{
		Ctx:  ctx,
		File: file,
	}
	lockboxerMockWriteDocuments.Lock()
	mock.calls.WriteDocuments = append(mock.calls.WriteDocuments, callInfo)
	lockboxerMockWriteDocuments.Unlock()
	return mock.WriteDocumentsFunc(ctx, file)
}

// WriteDocumentsCalls gets all the calls that were made to WriteDocuments.
// Check the length with:
//     len(mockedboxer.WriteDocumentsCalls())
func (mock *boxerMock) WriteDocumentsCalls() []struct {
	Ctx  context.Context
	File domain.File
} {
	var calls []struct {
		Ctx  context.Context
		File domain.File
	}
	lockboxerMockWriteDocuments.RLock()
	calls = mock.calls.WriteDocuments
	lockboxerMockWriteDocuments.RUnlock()
	return calls
}
